#!/usr/bin/perl -w
use strict;
use warnings;

### after: use lib qw(@RT_LIB_PATH@);
use lib qw(/opt/rt4/local/lib /opt/rt4/lib);

use RT;
BEGIN { RT::LoadConfig(); RT::Init(); }

use Getopt::Long;

my %OPT;
GetOptions(
    \%OPT,

    "directory|d=s",
    "force!",
    "size|s=i",

    "gnuplot|g!",

    "users!",
    "groups!",
    "deleted!",

    "scrips!",
    "tickets!",
    "acls!",

    "verbose!",
    "gc=i",
);

my %args;
$args{Directory}   = $OPT{directory};
$args{Force}       = $OPT{force};
$args{MaxFileSize} = $OPT{size} if $OPT{size};

$args{Verbose}     = $OPT{verbose};

if ($OPT{gnuplot}) {
    die "--gnuplot requires a gnuplot binary"
        unless `which gnuplot`;
    require Time::HiRes;
    $args{Progress} = \&gnuplot;
}

$args{AllUsers}      = $OPT{users}    if defined $OPT{users};
$args{AllGroups}     = $OPT{groups}   if defined $OPT{groups};
$args{FollowDeleted} = $OPT{deleted}  if defined $OPT{deleted};

$args{FollowScrips}  = $OPT{scrips}   if defined $OPT{scrips};
$args{FollowTickets} = $OPT{tickets}  if defined $OPT{tickets};
$args{FollowACL}     = $OPT{acls}     if defined $OPT{acls};

$args{GC} = $OPT{gc} || 5000;

use RT::Serializer;
my $walker = RT::Serializer->new( %args );

my %counts = $walker->Walk;

my @files = $walker->Files;
print "Wrote @{[scalar @files]} files:\n";
print "    $_\n" for @files;
print "\n";

print "Total object counts:\n";
for (sort {$counts{$b} <=> $counts{$a}} keys %counts) {
    printf "%8d %s\n", $counts{$_}, $_;
}

{
    my $last_written;
    my $last_time;
    my $start;

    sub plot {
        my ($title, $column) = @_;

        my ($col, $row) = (100, 50);
        eval {
            require Term::ReadKey;
            ($col, $row) = Term::ReadKey::GetTerminalSize();
        };
        $col -= 1;
        $row = int(($row - 5) / 2);

        my $file = $walker->Directory . "/progress.plot";
        system("gnuplot", "-e", <<EOT );
set term dumb $col $row;
set xlabel "Seconds";
unset key;
set autoscale;
set title "$title";
plot "$file" using 1:$column with lines
EOT
    }

    sub gnuplot {
        my $obj = shift;
        my $now = Time::HiRes::time();
        return if defined $last_time and $now - $last_time <= 3;

        $start = $now unless $start;
        my $length = $walker->StackSize;

        my $written = 0;
        my %counts = $walker->ObjectCount;
        $written += $_ for values %counts;

        open(my $dat, ">>", $walker->Directory . "/progress.plot");
        printf $dat "%10.3f\t%8d\t%10.3f\n",
            $now - $start,
            $length,
            defined $last_time ?
                ($written - $last_written)/($now - $last_time) :
                0;
        close $dat;

        if ($last_written) {
            print `clear`;
            plot( "Queue Length" => 2 );
            plot( "Objects written per second" => 3 );
            print $walker->{msg} . "\n" if $walker->{msg};
            $walker->{msg} = "";
        }

        $last_written = $written;
        $last_time = $now;
    }
}
